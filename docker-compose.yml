services:
    api:
        build:
            context: .
            dockerfile: ./.docker/Dockerfile
            args:
                APP_ENV: ${APP_ENV}
        environment:
            SERVICE_NAME: api
        entrypoint: [ "/var/www/api/.docker/docker-entrypoint.sh" ]
        ports:
            - "6001:6001"
        volumes:
            - ./:/var/www/api
            - ./storage/logs:/var/www/api/storage/logs/
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - test
    database:
        build:
            context: .
            dockerfile: ./.database/.docker/Dockerfile
        restart: unless-stopped
        environment:
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USER=${DB_USERNAME}
            - MYSQL_PASSWORD=${DB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
        volumes:
            - ./.database/.docker/setup.sh:/docker-entrypoint-initdb.d/setup.sh
            - ./.database/.docker/mysql:/var/lib/mysql
            - ./.database/.docker/mysqld.conf:/etc/mysql/conf.d/mysqld.conf:ro
        command: --pid-file /var/lib/mysql/mysqld.pid
        ports:
            - ${DB_PORT}:3306
        networks:
            - test
    nginx:
        image: nginx:alpine
        restart: unless-stopped
        tty: true
        stdin_open: true
        ports:
            - "80:80"
            - "443:443"
        environment:
            VIRTUAL_HOST: api.test
        volumes:
            - .:/var/www/api
            - ./.nginx/.docker/api.conf:/etc/nginx/conf.d/api.conf
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        networks:
            - test
    dozzle:
        image: amir20/dozzle:latest
        restart: unless-stopped
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "8080:8080"
        environment:
            DOZZLE_LEVEL: trace
        networks:
            - test
    redis:
        image: redis:alpine
        restart: unless-stopped
        command: redis-server --include /usr/local/etc/redis/redis.conf
        tty: true
        stdin_open: true
        volumes:
            - ./.redis/.docker/data:/data
        ports:
            - "6379:6379"
        networks:
            - test
networks:
    test:
